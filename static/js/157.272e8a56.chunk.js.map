{"version":3,"file":"static/js/157.272e8a56.chunk.js","mappings":"oPAgCA,UA3BsB,WACpB,OAAoCA,EAAAA,EAAAA,UAAS,MAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAAsBC,EAAAA,EAAAA,MAAfC,GAAP,eAsBA,OApBAC,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACRC,EAAOF,EAAYG,IAAI,SAI7B,aAHA,UAAa,OAATD,SAAJ,QAA8B,KAATA,IAFP,mCAGZE,CAAUF,IAHE,wCAMd,gHAE8BG,EAAAA,EAAAA,IAAWH,GAFzC,mBAG2B,KADfI,EAFZ,EAEYA,SACIC,OAHhB,uBAIMC,EAAAA,EAAAA,GAAY,wCAJlB,0BAOIV,EAAcQ,GAPlB,mDASIE,EAAAA,EAAAA,GAAY,KAAMC,SATtB,2DANc,sBAkBf,GAAE,CAACT,KAEG,8BAAGH,IAAc,SAAC,IAAD,CAAYK,KAAML,EAAYa,KAAK,MAC5D,C,wFC5BYC,EAAa,SAAC,GAA0B,IAAxBT,EAAuB,EAAvBA,KAAMU,EAAiB,EAAjBA,KAAMF,EAAW,EAAXA,KACvC,GAA6BG,EAAAA,EAAAA,MAArBC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,OAClB,OACE,gCACGH,IAAQ,wBAAKA,IACJ,OAATV,IACC,wBACGA,EAAKc,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACR,yBAEI,SAAC,KAAD,CACEC,GAAE,UAAKT,GAAL,OAAYO,GACdG,MAAO,CAAEC,KAAK,GAAD,OAAKP,GAAL,OAAgBC,IAF/B,SAIGG,KANED,EADD,QAgBnB,C,wFCtBYT,EAAc,SAAAC,GAAO,OAChCa,EAAAA,GAAAA,MAAYb,EAAS,CACnBc,SAAU,IACVC,SAAU,aAEVC,MAAO,CACLC,gBAAiB,MACjBC,QAAS,GACTC,MAAO,OACPC,MAAO,QACPC,SAAU,SAEZC,KAAM,eACNC,UAAW,CACTC,KAAM,SACN,YAAa,WAfe,EAmBlCzB,EAAY0B,UAAY,CACtBzB,QAAS0B,IAAAA,OAAAA,W,2NCrBXC,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAGHC,EAAmB,mCAAG,sGACVF,EAAAA,EAAAA,IAAA,qCACSC,EADT,YADU,uBACzBnC,EADyB,EACzBA,KADyB,kBAI1BA,GAJ0B,2CAAH,qDAOnBqC,EAAU,mCAAG,WAAMtB,GAAN,yFACDmB,EAAAA,EAAAA,IAAA,gBAAmBnB,EAAnB,oBAAiCoB,IADhC,uBAChBnC,EADgB,EAChBA,KADgB,kBAEjBA,GAFiB,2CAAH,sDAKVsC,EAAY,mCAAG,WAAMvB,GAAN,yFACHmB,EAAAA,EAAAA,IAAA,gBAAmBnB,EAAnB,4BAAyCoB,IADtC,uBAClBnC,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZuC,EAAY,mCAAG,WAAMxB,GAAN,yFACHmB,EAAAA,EAAAA,IAAA,gBAAmBnB,EAAnB,4BAAyCoB,IADtC,uBAClBnC,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZG,EAAU,mCAAG,WAAMqC,GAAN,yFACDN,EAAAA,EAAAA,IAAA,+BACGC,EADH,kBACoBK,IAFnB,uBAChBxC,EADgB,EAChBA,KADgB,kBAIjBA,GAJiB,2CAAH,sDAOVyC,EAAe,SAACjC,EAAMkC,GAAP,MA/BJ,8BA+BsCA,EAAOlC,CAAzC,C","sources":["components/MoviesByQuery.jsx","components/MoviesList.jsx","components/Notify/Notify.jsx","services/rest_api.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchQuery } from 'services/rest_api';\nimport { NotifyError } from './Notify/Notify';\nimport { MoviesList } from './MoviesList';\nconst MoviesByQuery = () => {\n  const [renderData, setRenderData] = useState(null);\n  const [searchParam] = useSearchParams();\n\n  useEffect(() => {\n    const data = searchParam.get('query');\n    if (data !== null ?? data !== '') {\n      getMovies(data);\n    }\n    return;\n    async function getMovies() {\n      try {\n        const { results } = await fetchQuery(data);\n        if (results.length === 0) {\n          NotifyError('There are no movies for this request');\n          return;\n        }\n        setRenderData(results);\n      } catch (error) {\n        NotifyError(error.message);\n      }\n    }\n  }, [searchParam]);\n\n  return <>{renderData && <MoviesList data={renderData} path=\"\" />}</>;\n};\n\nexport default MoviesByQuery;\n","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nexport const MoviesList = ({ data, text, path }) => {\n  const { pathname, search } = useLocation();\n  return (\n    <>\n      {text && <h1>{text}</h1>}\n      {data !== null && (\n        <ul>\n          {data.map(({ id, title }) => (\n            <li key={id}>\n              {\n                <Link\n                  to={`${path}${id}`}\n                  state={{ from: `${pathname}${search}` }}\n                >\n                  {title}\n                </Link>\n              }\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nMoviesList.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.object.isRequired),\n  text: PropTypes.string,\n  path: PropTypes.string,\n};\n","import toast from 'react-hot-toast';\nimport PropTypes from 'prop-types';\n\nexport const NotifyError = message =>\n  toast.error(message, {\n    duration: 3000,\n    position: 'top-center',\n\n    style: {\n      backgroundColor: 'red',\n      opacity: 0.5,\n      width: '50vw',\n      color: 'white',\n      fontSize: '1.5em',\n    },\n    icon: 'ðŸ¤”',\n    ariaProps: {\n      role: 'status',\n      'aria-live': 'polite',\n    },\n  });\n\nNotifyError.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '2da3e938b4dbf31e7c00d8a01ff91cc3';\nconst BASE_POSTER_URL = 'https://image.tmdb.org/t/p/';\n\nexport const fetchTrendingMovies = async () => {\n  const { data } = await axios.get(\n    `trending/movie/day?api_key=${API_KEY}&page=1`\n  );\n  return data;\n};\n\nexport const fetchMovie = async id => {\n  const { data } = await axios.get(`movie/${id}?api_key=${API_KEY}`);\n  return data;\n};\n\nexport const fetchCredits = async id => {\n  const { data } = await axios.get(`movie/${id}/credits?api_key=${API_KEY}`);\n  return data;\n};\n\nexport const fetchReviews = async id => {\n  const { data } = await axios.get(`movie/${id}/reviews?api_key=${API_KEY}`);\n  return data;\n};\n\nexport const fetchQuery = async value => {\n  const { data } = await axios.get(\n    `search/movie?api_key=${API_KEY}&query=${value}`\n  );\n  return data;\n};\n\nexport const getPosterUrl = (path, size) => BASE_POSTER_URL + size + path;\n"],"names":["useState","renderData","setRenderData","useSearchParams","searchParam","useEffect","data","get","getMovies","fetchQuery","results","length","NotifyError","message","path","MoviesList","text","useLocation","pathname","search","map","id","title","to","state","from","toast","duration","position","style","backgroundColor","opacity","width","color","fontSize","icon","ariaProps","role","propTypes","PropTypes","axios","API_KEY","fetchTrendingMovies","fetchMovie","fetchCredits","fetchReviews","value","getPosterUrl","size"],"sourceRoot":""}