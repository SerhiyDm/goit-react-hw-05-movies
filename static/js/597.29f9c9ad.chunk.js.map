{"version":3,"file":"static/js/597.29f9c9ad.chunk.js","mappings":"oPAiDA,UA3Ca,WACX,OAAwBA,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAiBR,OAhBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,mCAAG,WAAMC,GAAN,mGAEWC,EAAAA,EAAAA,IAAaD,GAFxB,gBAEJE,EAFI,EAEJA,KACRP,EAAQO,GACRC,OAAOC,SAAS,CACdC,IAAK,IACLC,SAAU,WANA,iDASZC,EAAAA,EAAAA,GAAY,KAAMC,SATN,yDAAH,sDAYbT,EAAQH,EACT,GAAE,CAACA,KAGF,iCACE,SAAC,KAAD,IACCF,GAAwB,IAAhBA,EAAKe,QACZ,wBACGf,EAAKgB,KAAI,gBAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,KAAMC,EAApB,EAAoBA,aAAcC,EAAlC,EAAkCA,UAAlC,OACR,0BACGD,IACC,gBAAKE,KAAKC,EAAAA,EAAAA,IAAaH,EAAc,QAASI,IAAI,aAEpD,4BACE,wBAAKL,KACL,uCAAeD,UANVG,EADD,OAaZ,oEAIP,C,wFC5CYP,EAAc,SAAAC,GAAO,OAChCU,EAAAA,GAAAA,MAAYV,EAAS,CACnBW,SAAU,IACVC,SAAU,aAEVC,MAAO,CACLC,gBAAiB,MACjBC,QAAS,GACTC,MAAO,OACPC,MAAO,QACPC,SAAU,SAEZC,KAAM,eACNC,UAAW,CACTC,KAAM,SACN,YAAa,WAfe,EAmBlCtB,EAAYuB,UAAY,CACtBtB,QAASuB,IAAAA,OAAAA,W,2NCrBXC,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAGHC,EAAmB,mCAAG,sGACVF,EAAAA,EAAAA,IAAA,qCACSC,EADT,YADU,uBACzBvC,EADyB,EACzBA,KADyB,kBAI1BA,GAJ0B,2CAAH,qDAOnByC,EAAU,mCAAG,WAAMnC,GAAN,yFACDgC,EAAAA,EAAAA,IAAA,gBAAmBhC,EAAnB,oBAAiCiC,IADhC,uBAChBvC,EADgB,EAChBA,KADgB,kBAEjBA,GAFiB,2CAAH,sDAKVO,EAAY,mCAAG,WAAMD,GAAN,yFACHgC,EAAAA,EAAAA,IAAA,gBAAmBhC,EAAnB,4BAAyCiC,IADtC,uBAClBvC,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZ0C,EAAY,mCAAG,WAAMpC,GAAN,yFACHgC,EAAAA,EAAAA,IAAA,gBAAmBhC,EAAnB,4BAAyCiC,IADtC,uBAClBvC,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZ2C,EAAU,mCAAG,WAAMC,GAAN,yFACDN,EAAAA,EAAAA,IAAA,+BACGC,EADH,kBACoBK,IAFnB,uBAChB5C,EADgB,EAChBA,KADgB,kBAIjBA,GAJiB,2CAAH,sDAOVsB,EAAe,SAACuB,EAAMC,GAAP,MA/BJ,8BA+BsCA,EAAOD,CAAzC,C","sources":["components/Cast.jsx","components/Notify/Notify.jsx","services/rest_api.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCredits, getPosterUrl } from 'services/rest_api';\nimport { Toaster } from 'react-hot-toast';\nimport { NotifyError } from './Notify/Notify';\n\nconst Cast = () => {\n  const [data, setData] = useState(null);\n  const { movieId } = useParams();\n  useEffect(() => {\n    const getData = async id => {\n      try {\n        const { cast } = await fetchCredits(id);\n        setData(cast);\n        window.scrollBy({\n          top: 480,\n          behavior: 'smooth',\n        });\n      } catch (error) {\n        NotifyError(error.message);\n      }\n    };\n    getData(movieId);\n  }, [movieId]);\n\n  return (\n    <>\n      <Toaster />\n      {data && data.length !== 0 ? (\n        <ul>\n          {data.map(({ character, name, profile_path, credit_id }) => (\n            <li key={credit_id}>\n              {profile_path && (\n                <img src={getPosterUrl(profile_path, 'w200')} alt=\"profile\" />\n              )}\n              <div>\n                <h3>{name}</h3>\n                <p>Character: {character}</p>\n              </div>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>We don`t have any casts for this movie</p>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import toast from 'react-hot-toast';\nimport PropTypes from 'prop-types';\n\nexport const NotifyError = message =>\n  toast.error(message, {\n    duration: 3000,\n    position: 'top-center',\n\n    style: {\n      backgroundColor: 'red',\n      opacity: 0.5,\n      width: '50vw',\n      color: 'white',\n      fontSize: '1.5em',\n    },\n    icon: 'ðŸ¤”',\n    ariaProps: {\n      role: 'status',\n      'aria-live': 'polite',\n    },\n  });\n\nNotifyError.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '2da3e938b4dbf31e7c00d8a01ff91cc3';\nconst BASE_POSTER_URL = 'https://image.tmdb.org/t/p/';\n\nexport const fetchTrendingMovies = async () => {\n  const { data } = await axios.get(\n    `trending/movie/day?api_key=${API_KEY}&page=1`\n  );\n  return data;\n};\n\nexport const fetchMovie = async id => {\n  const { data } = await axios.get(`movie/${id}?api_key=${API_KEY}`);\n  return data;\n};\n\nexport const fetchCredits = async id => {\n  const { data } = await axios.get(`movie/${id}/credits?api_key=${API_KEY}`);\n  return data;\n};\n\nexport const fetchReviews = async id => {\n  const { data } = await axios.get(`movie/${id}/reviews?api_key=${API_KEY}`);\n  return data;\n};\n\nexport const fetchQuery = async value => {\n  const { data } = await axios.get(\n    `search/movie?api_key=${API_KEY}&query=${value}`\n  );\n  return data;\n};\n\nexport const getPosterUrl = (path, size) => BASE_POSTER_URL + size + path;\n"],"names":["useState","data","setData","movieId","useParams","useEffect","getData","id","fetchCredits","cast","window","scrollBy","top","behavior","NotifyError","message","length","map","character","name","profile_path","credit_id","src","getPosterUrl","alt","toast","duration","position","style","backgroundColor","opacity","width","color","fontSize","icon","ariaProps","role","propTypes","PropTypes","axios","API_KEY","fetchTrendingMovies","fetchMovie","fetchReviews","fetchQuery","value","path","size"],"sourceRoot":""}