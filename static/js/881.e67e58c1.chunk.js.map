{"version":3,"file":"static/js/881.e67e58c1.chunk.js","mappings":"wMAGaA,EAAc,SAAAC,GAAO,OAChCC,EAAAA,GAAAA,MAAYD,EAAS,CACnBE,SAAU,IACVC,SAAU,aAEVC,MAAO,CACLC,gBAAiB,MACjBC,QAAS,GACTC,MAAO,OACPC,MAAO,QACPC,SAAU,SAEZC,KAAM,eACNC,UAAW,CACTC,KAAM,SACN,YAAa,WAfe,EAmBlCb,EAAYc,UAAY,CACtBb,QAASc,IAAAA,OAAAA,W,oICuBX,UAxCe,WACb,OAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAoBR,OAnBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,mCAAG,WAAMC,GAAN,mGAEcC,EAAAA,EAAAA,IAAaL,GAF3B,gBAEJM,EAFI,EAEJA,QACRP,EAAQO,GACRC,OAAOC,SAAS,CACdC,IAAK,IACLC,SAAU,WANA,iDASZ7B,EAAAA,EAAAA,GAAY,KAAMC,SATN,yDAAH,sDAYbqB,EAAQH,GACRO,OAAOC,SAAS,CACdC,IAAK,IACLC,SAAU,UAEb,GAAE,CAACV,KAEF,iCACE,SAAC,KAAD,IACU,OAATF,GAAiC,IAAhBA,EAAKa,QACrB,wBACGb,EAAKc,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASV,EAApB,EAAoBA,GAApB,OACR,2BACE,qCAAaS,MACb,uBAAIC,MAFGV,EADD,OAQZ,sEAIP,C,2NC3CDW,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAGHC,EAAmB,mCAAG,sGACVF,EAAAA,EAAAA,IAAA,qCACSC,EADT,YADU,uBACzBlB,EADyB,EACzBA,KADyB,kBAI1BA,GAJ0B,2CAAH,qDAOnBoB,EAAU,mCAAG,WAAMd,GAAN,yFACDW,EAAAA,EAAAA,IAAA,gBAAmBX,EAAnB,oBAAiCY,IADhC,uBAChBlB,EADgB,EAChBA,KADgB,kBAEjBA,GAFiB,2CAAH,sDAKVqB,EAAY,mCAAG,WAAMf,GAAN,yFACHW,EAAAA,EAAAA,IAAA,gBAAmBX,EAAnB,4BAAyCY,IADtC,uBAClBlB,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZO,EAAY,mCAAG,WAAMD,GAAN,yFACHW,EAAAA,EAAAA,IAAA,gBAAmBX,EAAnB,4BAAyCY,IADtC,uBAClBlB,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZsB,EAAU,mCAAG,WAAMC,GAAN,yFACDN,EAAAA,EAAAA,IAAA,+BACGC,EADH,kBACoBK,IAFnB,uBAChBvB,EADgB,EAChBA,KADgB,kBAIjBA,GAJiB,2CAAH,sDAOVwB,EAAe,SAACC,EAAMC,GAAP,MA/BJ,8BA+BsCA,EAAOD,CAAzC,C","sources":["components/Notify/Notify.jsx","components/Review.jsx","services/rest_api.js"],"sourcesContent":["import toast from 'react-hot-toast';\nimport PropTypes from 'prop-types';\n\nexport const NotifyError = message =>\n  toast.error(message, {\n    duration: 3000,\n    position: 'top-center',\n\n    style: {\n      backgroundColor: 'red',\n      opacity: 0.5,\n      width: '50vw',\n      color: 'white',\n      fontSize: '1.5em',\n    },\n    icon: 'ðŸ¤”',\n    ariaProps: {\n      role: 'status',\n      'aria-live': 'polite',\n    },\n  });\n\nNotifyError.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchReviews } from 'services/rest_api';\nimport { Toaster } from 'react-hot-toast';\nimport { NotifyError } from './Notify/Notify';\n\nconst Review = () => {\n  const [data, setData] = useState(null);\n  const { movieId } = useParams();\n  useEffect(() => {\n    const getData = async id => {\n      try {\n        const { results } = await fetchReviews(movieId);\n        setData(results);\n        window.scrollBy({\n          top: 480,\n          behavior: 'smooth',\n        });\n      } catch (error) {\n        NotifyError(error.message);\n      }\n    };\n    getData(movieId);\n    window.scrollBy({\n      top: 480,\n      behavior: 'smooth',\n    });\n  }, [movieId]);\n  return (\n    <>\n      <Toaster />\n      {data !== null && data.length !== 0 ? (\n        <ul>\n          {data.map(({ author, content, id }) => (\n            <li key={id}>\n              <h4>Author: {author}</h4>\n              <p>{content}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>We don`t have any reviews for this movie</p>\n      )}\n    </>\n  );\n};\nexport default Review;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '2da3e938b4dbf31e7c00d8a01ff91cc3';\nconst BASE_POSTER_URL = 'https://image.tmdb.org/t/p/';\n\nexport const fetchTrendingMovies = async () => {\n  const { data } = await axios.get(\n    `trending/movie/day?api_key=${API_KEY}&page=1`\n  );\n  return data;\n};\n\nexport const fetchMovie = async id => {\n  const { data } = await axios.get(`movie/${id}?api_key=${API_KEY}`);\n  return data;\n};\n\nexport const fetchCredits = async id => {\n  const { data } = await axios.get(`movie/${id}/credits?api_key=${API_KEY}`);\n  return data;\n};\n\nexport const fetchReviews = async id => {\n  const { data } = await axios.get(`movie/${id}/reviews?api_key=${API_KEY}`);\n  return data;\n};\n\nexport const fetchQuery = async value => {\n  const { data } = await axios.get(\n    `search/movie?api_key=${API_KEY}&query=${value}`\n  );\n  return data;\n};\n\nexport const getPosterUrl = (path, size) => BASE_POSTER_URL + size + path;\n"],"names":["NotifyError","message","toast","duration","position","style","backgroundColor","opacity","width","color","fontSize","icon","ariaProps","role","propTypes","PropTypes","useState","data","setData","movieId","useParams","useEffect","getData","id","fetchReviews","results","window","scrollBy","top","behavior","length","map","author","content","axios","API_KEY","fetchTrendingMovies","fetchMovie","fetchCredits","fetchQuery","value","getPosterUrl","path","size"],"sourceRoot":""}